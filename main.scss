@use "scss/variables" as vars;
@use "scss/components/tabs" as tabs;
@use "scss/animations" as animations;
/// OUTLINE
/// ---------------------------------------------
///  MIXINS AND FUNCTIONS
///  BASE STYLES
///  COMPONENTS
///  LAYOUT
///  THEMES OR VARIATIONS
///  VENDOR-SPECIFIC STYLES
///  IMPORTS AND MAIN SCSS
/// ---------------------------------------------

//  MIXINS AND FUNCTIONS
// ---------------------------------------------
// Place mixins and functions next, below the variables section. This includes animation mixins, utility mixins,
// and any custom functions you may have.

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

@mixin css-generator($att: ".", $prop: null, $value: null) {
  $conv: str-replace($value, " ", "-");
  #{$att}#{$prop}-#{$conv} {
    #{$prop}: #{$value};
  }
}
@include css-generator(".", text-align, "center");


@mixin font($size, $weight: normal, $color: vars.$primary-font-color) {
  font-size: $size;
  font-weight: $weight;
  color: $color;
}

@mixin width-classes($prefix, $values) {
  @each $value in $values {
    .#{$prefix}-#{$value} {
      width: $value + px;
    }
  }
}
$image-widths: 100, 150, 200, 250, 275, 300, 350, 400, 450, 500;
@include width-classes('width', $image-widths);

// 3. BASE STYLES
// ---------------------------------------------
// Write base styles that apply to the entire project or multiple components. This includes global resets,
// typography rules, and default styles for HTML elements.

.align-left {
  float: left;
}

.align-right {
  float: right;
}

.align-none {
  float: none;
}

img {
  &.align-left {
    margin-right: 30px;
  } 
  &.align-right {
    margin-left: 30px;
  } 
  &.align-center {
    margin: 0 auto;
  } 
}

div > p:first-of-type {
  margin-top: 0;
}

html, body {
  font-family: vars.$font-stack;
  color: vars.$primary-font-color;
}

.container {
  @include animations.fade-in;
  max-width: vars.$container-width;
  margin: 0 auto;
  padding: 30px;
}

body {
  margin: 0;
  padding: 0;
  overflow-x: hidden;
}

/* HEADINGS */
$heading_sizes: (
  h1: 2rem,
  h2: 1.5rem,
  h3: 1.17rem,
  h4: 1rem,
  h5: 0.83rem,
  h6: 0.67rem,
);

@each $heading, $size in $heading_sizes {
  #{$heading} {
    font-size: $size;
  }
}

// 4. COMPONENTS
// ---------------------------------------------
// Organize your styles by components. Each component should have its own SCSS file or folder.
// Group related styles together within each component file.

header {
  @include animations.fade-in-down;
  position: absolute;
  top: 0;
  width: 100%;
  z-index: 9999;
  max-width: 100vw !important;

  .header-container {
    display: flex;
    flex-wrap: wrap;
    align-items: center;

    > * {
      width: 50%;
    }

    .header-title {
      margin: 0;
    }

    .header-nav {
      ul {
        list-style: none;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: flex-end;

        li {
          a {
            text-decoration: none;
            color: black;
            padding: 20px 24px;
            font-size: 22px;
          }
        }

        li:last-child {
          margin-right: 0;
        }

        svg.svg-inline--fa {
          display: none;
        }
      }
    }
  }
}

main {
  display: flex;
  overflow-x: hidden;
  width: 300vw;
  max-width: 300vw;

  .tab {
    width: 100vw;
    max-width: 100vw;
    height: 100vh;
    font-size: 24px;
    transition: transform 0.3s ease;

    .container {
      @include animations.fade-in-up;
    }
  }
}

// 5. LAYOUT
// ---------------------------------------------
// If you have layout-specific styles, such as grid systems or responsive layout rules,
// create a separate SCSS file for them.

@include tabs.tabs("#home-tab", #feeed3);
@include tabs.tabs("#resume-tab", #4682b4);
@include tabs.tabs("#portfolio-tab", #2e8b57);

// 6. THEMES AND VARIATIONS
// ---------------------------------------------
// If your project has multiple themes or variations, consider organizing them into separate SCSS files or folders.
// This allows for easier switching between different styles.

footer {
  background-color: #f0f0f0;
  padding: 20px;

  .footer-container {
    display: flex;

    .footer-column {
      flex: 1;
      padding: 10px;
    }
  }
}

section.tab {
  padding-top: 150px;
}

.container {
  max-width: vars.$container-width;
  margin: 0 auto;
  padding: 30px 50px;
}

$grid_columns: 12;
$grid_gutter: 20px;

.row {
  justify-content: center;
  display: flex;
  flex-wrap: wrap;
  margin: -($grid_gutter / 2);

  > .col {
    padding: ($grid_gutter / 2);
    box-sizing: border-box;
  }
}

@for $i from 1 to $grid_columns {
  .col-#{$i} {
    flex: 0 0 ($i / $grid_columns) * 100%;
    max-width: ($i / $grid_columns) * 100%;
  }
}

// 7. VENDOR-SPECIFIC STYLES
// ---------------------------------------------
// If you have vendor-specific styles, such as browser-specific CSS rules or vendor prefixes,
// organize them in a separate file.

// 8. IMPORTS AND MAIN SCSS
// ---------------------------------------------
// Finally, import all the necessary SCSS files into your main SCSS file. This ensures that the styles are compiled properly.
// The main SCSS file should have minimal code and mainly serve as an entry point for compilation.

// Remember to use meaningful file and folder names to improve readability and maintainability.
// Additionally, consider using a build tool or task runner to compile and optimize your SCSS code for production.

// Keep in mind that this is just one possible organization scheme, and you can adapt it based on the specific needs and
// preferences of your project. It's important to choose an organization that suits your project's size, complexity,
// and team structure.
